
# -*- coding: utf-8 -*-
#
# -----------------------------------------------------------------------------
# telescope.py - Alpaca API responders for Telescope
#
# Author:   Your R. Name <your@email.org> (abc)
#
# -----------------------------------------------------------------------------
# Edit History:
#   Generated by Python Interface Generator for AlpycaDevice
#
# ??-???-????   abc Initial edit

from falcon import Request, Response, HTTPBadRequest, before
from logging import Logger
import logging
from shr import PropertyResponse, MethodResponse, PreProcessRequest, \
                get_request_field, to_bool
from exceptions import *        # Nothing but exception classes 
from telescope_device import TelescopeDevice

def write_numbers_to_file(direction, num1, duration, num2, filename):
    with open(filename, 'a') as file:
        file.write(f'DIRECTION={num1}\tDURATION={num2}\n')

# Add a proper logger

logger: Logger = None

def configure_logger(log_file, log_level=logging.INFO):
    # Create a logger
    logger = logging.getLogger('my_logger')
    logger.setLevel(log_level)

    # Create a file handler and set the level to log to the file
    file_handler = logging.FileHandler(log_file, mode = 'a')
    file_handler.setLevel(log_level)

    # Create a console handler and set the level to log to the console
    console_handler = logging.StreamHandler()
    console_handler.setLevel(log_level)

    # Create a formatter to format the log messages
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # Add the formatter to the handlers
    file_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)

    # Add the handlers to the logger
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

    return logger

log_file ='telescope.log'
logger = configure_logger(log_file)

Logger = logger

#Used to test guider output
def write_numbers_to_file(dir, dur, filename):
    with open(filename, 'a') as file:
        file.write(f'DIRECTION={dir}\tDURATION={dur}\n')


# ----------------------
# MULTI-INSTANCE SUPPORT
# ----------------------
# If this is > 0 then it means that multiple devices of this type are supported.
# Each responder on_get() and on_put() is called with a devnum parameter to indicate
# which instance of the device (0-based) is being called by the client. Leave this
# set to 0 for the simple case of controlling only one instance of this device type.
#
maxdev = 0                      # Single instance

# -----------
# TELESCOPE DEVICE INFO
# -----------
# Static metadata not subject to configuration changes
## EDIT FOR YOUR DEVICE ##
class TelescopeMetadata:
    """ Metadata describing the Telescope Device. Edit for your device"""
    Name = 'SEO Telescope'
    Version = '0.0.1'
    Description = 'Initial implementation of an Alpyca controller to gather commands from MaxIm DL to send to the mount at SEO'
    DeviceType = 'Telescope'
    DeviceID = 'ac2e683a-42bd-4920-bb6b-f810981df75c' # https://guidgenerator.com/online-guid-generator.aspx
    Info = 'Alpaca Sample Device\nImplements ITelescope\nASCOM Initiative'
    MaxDeviceNumber = maxdev
    InterfaceVersion = 3       # The interface version number that this device supports. 
                                # Should return 3 for this interface version.

# --------------------
# TELESCOPE DEVICE CLASS
# --------------------
tel_dev = None
def start_telescope_device(logger: logger):
    logger = logger
    global tel_dev
    tel_dev = TelescopeDevice(logger)

start_telescope_device(logger)
# --------------------
# RESOURCE CONTROLLERS
# --------------------

dummy = True #TODO: Replace all "if not dummy" with queries to see if telescope is available
@before(PreProcessRequest(maxdev))
class Action:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class CommandBlind:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class CommandBool:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class CommandString():
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class Description():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Description, req).json

@before(PreProcessRequest(maxdev))
class DriverInfo():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Info, req).json

@before(PreProcessRequest(maxdev))
class InterfaceVersion():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.InterfaceVersion, req).json

@before(PreProcessRequest(maxdev))
class DriverVersion():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Version, req).json

@before(PreProcessRequest(maxdev))
class Name():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Name, req).json

@before(PreProcessRequest(maxdev))
class SupportedActions():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse([], req).json  # Not PropertyNotImplemented

@before(PreProcessRequest(maxdev))
class connected:
    """
    Retrieves or sets the connected state of the device

    * Set True to connect to the device hardware. Set False to disconnect
      from the device hardware. Client can also read the property to check
      whether it is connected. This reports the current hardware state.
    * Multiple calls setting Connected to true or false must not cause
      an error.
    """
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(tel_dev.connected, req).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        conn_str = get_request_field('Connected', req)
        conn = to_bool(conn_str)              # Raises 400 Bad Request if str to bool fails

        try:
            # ----------------------
            tel_dev.connected = conn
            # ----------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req, # Put is actually like a method :-(
                            DriverException(0x500, f'{self.__class__.__name__} failed', ex)).json
            
@before(PreProcessRequest(maxdev))
class alignmentmode:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.alignment_mode
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Alignmentmode failed', ex)).json

@before(PreProcessRequest(maxdev))
class altitude:
    # The Altitude above the local horizon of the telescope's 
    # current position (degrees, positive up)
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.altitude #TODO: Query the telescope for its altitude
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Altitude failed', ex)).json

@before(PreProcessRequest(maxdev))
class aperturearea:
    # The area of the telescope's aperture, 
    # taking into account any obstructions (square meters)
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.aperture_area #Area of the SEO Telescope mirror
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Aperturearea failed', ex)).json

@before(PreProcessRequest(maxdev))
class aperturediameter:
    # The telescope's effective aperture diameter (meters)
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.aperture_diameter #Aperture diameter of SEO telescope
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Aperturediameter failed', ex)).json

@before(PreProcessRequest(maxdev))
class athome:
    # True if the telescope is stopped in the Home position. 
    # Set only following a FindHome() operation, and reset with any slew operation. 
    # This property must be False if the telescope does not support homing.
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.at_home # Query the Telescope to see if it is in the home position
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Athome failed', ex)).json

@before(PreProcessRequest(maxdev))
class atpark:
    # True if the telescope has been put into the parked state by the Park() method. 
    # Set False by calling the Unpark() method.
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.at_park # Query the telescope if it is in the park position
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Atpark failed', ex)).json

@before(PreProcessRequest(maxdev))
class azimuth:
    # The azimuth at the local horizon of the telescope's current position 
    # (degrees, North-referenced, positive East/clockwise).
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.azimuth # Query the telescope to get its Azimuth
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Azimuth failed', ex)).json

@before(PreProcessRequest(maxdev))
class canfindhome:
    # True if this telescope is capable of programmed finding its home position
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.can_find_home # Query the telescope to see if it can find home
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canfindhome failed', ex)).json

@before(PreProcessRequest(maxdev))
class canpark:
    # True if this telescope is capable of programmed parking (Park()method)
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.can_park # Query the telescope to see if it can park
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canpark failed', ex)).json

@before(PreProcessRequest(maxdev))
class canpulseguide:
    # True if this telescope is capable of software-pulsed guiding 
    # (via the PulseGuide(GuideDirections, Int32) method)
    # This is what we use to implement movement of SEO Telescope
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.can_pulse_guide # Query the telescope to see if it can pulse guide
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canpulseguide failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetdeclinationrate:
    # True if the DeclinationRate property can be changed to 
    # provide offset tracking in the declination axis.
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.can_set_declination_rate # Query the telescope to see if it can set declination rate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetdeclinationrate failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetguiderates:
    # True if the guide rate properties used for 
    # PulseGuide(GuideDirections, Int32) can be adjusted.
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.can_set_guide_rates # Query the telescope to see if it can set guide rates 
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetguiderates failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetpark:
    # True if this telescope is capable of programmed 
    # setting of its park position (SetPark() method)
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.can_set_park # Query the telescope to see if it can set park 
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetpark failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetpierside:
    # True if the SideOfPier property can be set, 
    # meaning that the mount can be forced to flip.
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.can_set_pier_side # Query the telescope to see if it can set pier side 
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetpierside failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetrightascensionrate:
    # True if the RightAscensionRate property can be changed to 
    # provide offset tracking in the right ascension axis.
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.can_set_right_ascension_rate # Query the telescope to see if it can set right ascension rate 
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetrightascensionrate failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansettracking:
    # True if the Tracking property can be changed, 
    # turning telescope sidereal tracking on and off.
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.can_set_tracking # Query the telescope to see if it can set tracking
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansettracking failed', ex)).json

@before(PreProcessRequest(maxdev))
class canslew:
    # True if this telescope is capable of programmed slewing 
    # (synchronous or asynchronous) to equatorial coordinates
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.can_slew # Query the telescope to see if it can slew
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canslew failed', ex)).json

@before(PreProcessRequest(maxdev))
class canslewaltaz:
    # True if this telescope is capable of programmed slewing 
    # (synchronous or asynchronous) to local horizontal coordinates
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False # Will only slew to equatorial coordinates
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canslewaltaz failed', ex)).json

@before(PreProcessRequest(maxdev))
class canslewaltazasync:
    # True if this telescope is capable of programmed asynchronous 
    # slewing to local horizontal coordinates
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.can_slew_alt_az_async # Query the telescope to see if it can slew to altaz asynchronously
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canslewaltazasync failed', ex)).json

@before(PreProcessRequest(maxdev))
class canslewasync:
    # True if this telescope is capable of programmed asynchronous 
    # slewing to equatorial coordinates.
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.can_slew_async # Query the telescope to see if it can slew asynchronously
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canslewasync failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansync:
    # True if this telescope is capable of programmed synching 
    # to equatorial coordinates.
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.can_sync # Query the telescope to see if it can sync
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansync failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansyncaltaz:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.can_sync_alt_az # Query the telescope to see if it can sync to altaz
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansyncaltaz failed', ex)).json

@before(PreProcessRequest(maxdev))
class canunpark:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.can_unpark # Query the telescope to see if it can unpark
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canunpark failed', ex)).json

@before(PreProcessRequest(maxdev))
class declination:
    # The declination (degrees) of the telescope's current equatorial coordinates, 
    # in the coordinate system given by the EquatorialSystem property. 
    # Reading the property will raise an error if the value is unavailable.
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.declination # Query the telescope for the declination
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Declination failed', ex)).json

@before(PreProcessRequest(maxdev))
class declinationrate:
    # The declination tracking rate (arcseconds per SI second, default = 0.0)
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.declination_rate # Query the telescope for the declination rate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Declinationrate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        declinationratestr = get_request_field('DeclinationRate', req)      # Raises 400 bad request if missing
        try:
            declinationrate = float(declinationratestr)
            tel_dev.declination_rate = declinationrate
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'DeclinationRate " + declinationratestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            pass
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Declinationrate failed', ex)).json

@before(PreProcessRequest(maxdev))
class doesrefraction:
    # True if the telescope or driver applies atmospheric refraction to coordinates.
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.does_refraction # Query the telescope for the refraction status
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Doesrefraction failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        doesrefractionstr = get_request_field('DoesRefraction', req)      # Raises 400 bad request if missing
        doesrefraction = to_bool(doesrefractionstr)                       # Same here

        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Doesrefraction failed', ex)).json

@before(PreProcessRequest(maxdev))
class equatorialsystem:
    # Equatorial coordinate system used by this telescope (e.g. Topocentric or J2000).
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.equatorial_system # Query the telescope for the equatorial system
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Equatorialsystem failed', ex)).json

@before(PreProcessRequest(maxdev))
class focallength:
    # The telescope's focal length, meters
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 2 #TODO: Check for SEO
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Focallength failed', ex)).json

@before(PreProcessRequest(maxdev))
class guideratedeclination:
    # The current Declination movement rate offset for telescope guiding (degrees/sec)
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.guide_rate_declination # Query the telescope for the guide rate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Guideratedeclination failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        guideratedeclinationstr = get_request_field('GuideRateDeclination', req)      # Raises 400 bad request if missing
        try:
            guideratedeclination = float(guideratedeclinationstr)
            tel_dev.guide_rate_declination = guideratedeclination
            logger.info(f'GuideRateDeclination set to {guideratedeclination}')
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'GuideRateDeclination " + guideratedeclinationstr + " not a valid number.')).json
            return

@before(PreProcessRequest(maxdev))
class guideraterightascension:
    # The current Right Ascension movement rate offset for telescope guiding (degrees/sec)
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.guide_rate_right_ascension # Query the telescope for the guide rate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Guideraterightascension failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        guideraterightascensionstr = get_request_field('GuideRateRightAscension', req)      # Raises 400 bad request if missing
        try:
            guideraterightascension = float(guideraterightascensionstr)
            tel_dev.guide_rate_right_ascension = guideraterightascension
            logger.info(f'GuideRateRightAscension set to {guideraterightascension}')
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'GuideRateRightAscension " + guideraterightascensionstr + " not a valid number.')).json
            return

@before(PreProcessRequest(maxdev))
class ispulseguiding:
    # True if a PulseGuide(GuideDirections, Int32) command is in progress, False otherwise
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.is_pulse_guiding # Query the telescope for the pulse guiding status
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Ispulseguiding failed', ex)).json       

@before(PreProcessRequest(maxdev))
class rightascension:
    # The right ascension (hours) of the telescope's current equatorial coordinates, 
    # in the coordinate system given by the EquatorialSystem property
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.right_ascension # Query the telescope for the right ascension
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Rightascension failed', ex)).json

@before(PreProcessRequest(maxdev))
class rightascensionrate:
    # The right ascension tracking rate offset from sidereal 
    # (seconds per sidereal second, default = 0.0)
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.right_ascension_rate # Query the telescope for the right ascension rate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Rightascensionrate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        rightascensionratestr = get_request_field('RightAscensionRate', req)      # Raises 400 bad request if missing
        try:
            rightascensionrate = float(rightascensionratestr)
            tel_dev.right_ascension_rate = rightascensionrate
            logger.info(f'RightAscensionRate set to {rightascensionrate}')
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'RightAscensionRate " + rightascensionratestr + " not a valid number.')).json
            return

@before(PreProcessRequest(maxdev))
class sideofpier:
    # Indicates the pointing state of the mount.
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.side_of_pier # Query the telescope for the side of pier
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Sideofpier failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        sideofpierstr = get_request_field('SideOfPier', req)      # Raises 400 bad request if missing
        try:
            sideofpier = int(sideofpierstr)
            tel_dev.side_of_pier = sideofpier
            logger.info(f'SideOfPier set to {sideofpier}')
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SideOfPier " + sideofpierstr + " not a valid number.')).json
            return

@before(PreProcessRequest(maxdev))
class siderealtime:
    # The local apparent sidereal time from the telescope's internal clock (hours, sidereal)
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.sidereal_time # Query the telescope for the sidereal time
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Siderealtime failed', ex)).json

@before(PreProcessRequest(maxdev))
class siteelevation:
    # The elevation above mean sea level (meters) of the 
    # site at which the telescope is located
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.site_elevation # Query the telescope for the site elevation
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Siteelevation failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        siteelevationstr = get_request_field('SiteElevation', req)      # Raises 400 bad request if missing
        try:
            siteelevation = float(siteelevationstr)
            tel_dev.site_elevation = siteelevation
            logger.info(f'SiteElevation set to {siteelevation}')
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SiteElevation " + siteelevationstr + " not a valid number.')).json
            return

@before(PreProcessRequest(maxdev))
class sitelatitude:
    # The geodetic(map) latitude (degrees, positive North, WGS84) of the site at which the telescope is located.
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val =  tel_dev.site_latitude # Query the telescope for the site latitude
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Sitelatitude failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        sitelatitudestr = get_request_field('SiteLatitude', req)      # Raises 400 bad request if missing
        try:
            sitelatitude = float(sitelatitudestr)
            tel_dev.site_latitude = sitelatitude
            logger.info(f'SiteLatitude set to {sitelatitude}')
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SiteLatitude " + sitelatitudestr + " not a valid number.')).json
            return

@before(PreProcessRequest(maxdev))
class sitelongitude:
    # The longitude (degrees, positive East, WGS84) of the site at which the telescope is located.
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.site_longitude # Query the telescope for the site longitude
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Sitelongitude failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        sitelongitudestr = get_request_field('SiteLongitude', req)      # Raises 400 bad request if missing
        try:
            sitelongitude = float(sitelongitudestr)
            tel_dev.site_longitude = sitelongitude
            logger.info(f'SiteLongitude set to {sitelongitude}')
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SiteLongitude " + sitelongitudestr + " not a valid number.')).json
            return
@before(PreProcessRequest(maxdev))
class slewing:
    # True if telescope is in the process of moving in response to one of the Slew methods 
    # or the MoveAxis(TelescopeAxes, Double) method, False at all other times.
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.slewing # Query the telescope for the slewing state 
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Slewing failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewsettletime:
    # Specifies a post-slew settling time (sec.).
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.slew_settle_time # Query the telescope for the slew settle time
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Slewsettletime failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        slewsettletimestr = get_request_field('SlewSettleTime', req)      # Raises 400 bad request if missing
        try:
            slewsettletime = int(slewsettletimestr)
            tel_dev.slew_settle_time = slewsettletime
            logger.info(f'SlewSettleTime set to {slewsettletime}')
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SlewSettleTime " + slewsettletimestr + " not a valid number.')).json
            return

@before(PreProcessRequest(maxdev))
class targetdeclination:
    # The declination (degrees, positive North) for the target 
    # of an equatorial slew or sync operation
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.target_declination # Query the telescope for the target declination
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Targetdeclination failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        targetdeclinationstr = get_request_field('TargetDeclination', req)      # Raises 400 bad request if missing
        try:
            targetdeclination = float(targetdeclinationstr)
            tel_dev.target_declination = targetdeclination
            logger.info(f'TargetDeclination set to {targetdeclination}')
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'TargetDeclination " + targetdeclinationstr + " not a valid number.')).json
            return
        
@before(PreProcessRequest(maxdev))
class targetrightascension:
    # The right ascension (hours) for the target of an equatorial slew or sync operation
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.target_right_ascension # Query the telescope for the target right ascension
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Targetrightascension failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        targetrightascensionstr = get_request_field('TargetRightAscension', req)      # Raises 400 bad request if missing
        try:
            targetrightascension = float(targetrightascensionstr)
            tel_dev.target_right_ascension = targetrightascension
            logger.info(f'TargetRightAscension set to {targetrightascension}')
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'TargetRightAscension " + targetrightascensionstr + " not a valid number.')).json
            return
        
@before(PreProcessRequest(maxdev))
class tracking:
    # The state of the telescope's sidereal tracking drive.
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.tracking # Query the telescope for the tracking state
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Tracking failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return   
        trackingstr = get_request_field('Tracking', req) 
        try:
            # -----------------------------
            tracking = to_bool(trackingstr)
            tel_dev.tracking = tracking
            logger.info(f'Tracking set to {tracking}')                
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Tracking failed', ex)).json

@before(PreProcessRequest(maxdev))
class trackingrate:
# The current tracking rate of the telescope's sidereal drive
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.tracking_rate # Query the telescope for the tracking rate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Trackingrate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        trackingratestr = get_request_field('TrackingRate', req)      # Raises 400 bad request if missing
        try:
            trackingrate = int(trackingratestr)
            tel_dev.tracking_rate = trackingrate
            logger.info(f'TrackingRate set to {trackingrate}')
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'TrackingRate " + trackingratestr + " not a valid number.')).json
            return

@before(PreProcessRequest(maxdev))
class trackingrates:
    # Returns a collection of supported DriveRates values that 
    # describe the permissible values of the TrackingRate property for this telescope type.
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.tracking_rates # Query the telescope for the tracking rates
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Trackingrates failed', ex)).json

@before(PreProcessRequest(maxdev))
class utcdate:
    # The UTC date/time of the telescope's internal clock
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = tel_dev.utc_date # Query the telescope for the UTC date/time
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Utcdate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        utcdatestr = get_request_field('UTCDate', req)      # Raises 400 bad request if missing
        try:
            utcdate = {cvtfunc}(utcdatestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'UTCDate " + utcdatestr + " not a valid number.')).json
            return

        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Utcdate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Utcdate failed', ex)).json

@before(PreProcessRequest(maxdev))
class abortslew:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Abortslew failed', ex)).json

@before(PreProcessRequest(maxdev))
class axisrates:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            pass
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Axisrates failed', ex)).json

@before(PreProcessRequest(maxdev))
class canmoveaxis:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = True #Query Aster
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canmoveaxis failed', ex)).json

@before(PreProcessRequest(maxdev))
class destinationsideofpier:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            pass
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Destinationsideofpier failed', ex)).json

@before(PreProcessRequest(maxdev))
class findhome:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Findhome failed', ex)).json

@before(PreProcessRequest(maxdev))
class moveaxis:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        axisstr = get_request_field('Axis', req)      # Raises 400 bad request if missing
        try:
            axis = int(axisstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Axis " + axisstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        ratestr = get_request_field('Rate', req)      # Raises 400 bad request if missing
        try:
            rate = float(ratestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Rate " + ratestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Moveaxis failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Moveaxis failed', ex)).json

@before(PreProcessRequest(maxdev))
class park:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Park failed', ex)).json

@before(PreProcessRequest(maxdev))
class pulseguide:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        directionstr = get_request_field('Direction', req)      # Raises 400 bad request if missing
        try:
            direction = int(directionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Direction " + directionstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        durationstr = get_request_field('Duration', req)      # Raises 400 bad request if missing
        try:
            duration = int(durationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Duration " + durationstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            write_numbers_to_file(direction, duration, "output.txt")
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Pulseguide failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        directionstr = get_request_field('Direction', req)      # Raises 400 bad request if missing
        try:
            direction = int(directionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Direction " + directionstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        durationstr = get_request_field('Duration', req)      # Raises 400 bad request if missing
        try:
            duration = int(durationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Duration " + durationstr + " not a valid number.')).json
            return
        try:
            # -----------------------------
            tel_dev.pulse_guide(direction, duration)
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Pulseguide failed', ex)).json

@before(PreProcessRequest(maxdev))
class setpark:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Setpark failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtoaltaz:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        azimuthstr = get_request_field('Azimuth', req)      # Raises 400 bad request if missing
        try:
            azimuth = int(azimuthstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Azimuth " + azimuthstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        altitudestr = get_request_field('Altitude', req)      # Raises 400 bad request if missing
        try:
            altitude = int(altitudestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Altitude " + altitudestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtoaltaz failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtoaltazasync:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        azimuthstr = get_request_field('Azimuth', req)      # Raises 400 bad request if missing
        try:
            azimuth = int(azimuthstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Azimuth " + azimuthstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        altitudestr = get_request_field('Altitude', req)      # Raises 400 bad request if missing
        try:
            altitude = int(altitudestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Altitude " + altitudestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtoaltazasync failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtocoordinates:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        rightascensionstr = get_request_field('RightAscension', req)      # Raises 400 bad request if missing
        try:
            rightascension = int(rightascensionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'RightAscension " + rightascensionstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        declinationstr = get_request_field('Declination', req)      # Raises 400 bad request if missing
        try:
            declination = int(declinationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Declination " + declinationstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtocoordinates failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtocoordinatesasync:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        rightascensionstr = get_request_field('RightAscension', req)      # Raises 400 bad request if missing
        try:
            rightascension = int(rightascensionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'RightAscension " + rightascensionstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        declinationstr = get_request_field('Declination', req)      # Raises 400 bad request if missing
        try:
            declination = int(declinationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Declination " + declinationstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtocoordinatesasync failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtotarget:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtotarget failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtotargetasync:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tel_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtotargetasync failed', ex)).json



